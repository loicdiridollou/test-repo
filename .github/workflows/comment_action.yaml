name: Comment Commands to Trigger CI
on:
  issue_comment:
    types: created

env:
  COMMENT: "/pandas_nightly"

permissions:
  checks: write

jobs:
  pandas_nightly:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: (github.event.issue.pull_request) && github.event.comment.body == env.COMMENT

    steps:
      # - uses: actions/checkout@v4

      # - name: Install project dependencies
      #   uses: ./.github/setup
      #   with:
      #     os: ubuntu-latest
      #     python-version: "3.11"
      #
      # - name: Run pytest (against pandas nightly)
      #   id: tests-step
      #   run: poetry run poe pytest --nightly

      - name: Run pytest (against pandas nightly)
        id: tests-step
        run: echo ${{ github.event.comment.body }}

      # - name: Get head sha and store value
      #   if: always()
      #   id: get-sha
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const pr = await github.rest.pulls.get({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: ${{ github.event.issue.number }}
      #       })
      #       core.setOutput('sha', pr.data.head.sha)
      #
      # - name: Report results of the tests and publish
      #   if: always()
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       github.rest.checks.create({
      #         name: 'Pandas nightly tests',
      #         head_sha: '${{ steps.get-sha.outputs.sha }}',
      #         status: 'completed',
      #         conclusion: '${{ steps.tests-step.outcome }}',
      #         output: {
      #           title: 'Run pandas nightly tests',
      #           summary: 'Results: ${{ steps.tests-step.outcome }}',
      #           text: 'See the actions run at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
      #         },
      #         owner: context.repo.owner,
      #         repo: context.repo.repo
      #       })
